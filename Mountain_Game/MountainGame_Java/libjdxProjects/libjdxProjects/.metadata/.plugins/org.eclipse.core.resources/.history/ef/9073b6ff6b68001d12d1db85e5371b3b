package com.mountain.game;
// List of imports
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer.Random;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.ScreenUtils;

public class Game extends ApplicationAdapter {
	private SpriteBatch batch; // batch variable declaration
	private Texture background; // background variable declaration
	Texture player;	// player variable decalaration
	public Rectangle PlayerRectangle;
	int PlayerSpeed = 5;
	private Texture rock;
	private rocks Rock;
	int rockXPos;
	int rockYPos;
	int rockSpeed;
	private Float Timer = 0f;
	float Time = 0;
	Integer HighScore = 0;
	private static ArrayList<rocks>  rockArray= new ArrayList<rocks>();
	private BitmapFont EndFont;
	private BitmapFont WelcomeFont;
	private BitmapFont ScoreFont;
	private int WelcomeFontXPos = 20;
	private int fontCounter = 0;
	private java.util.Random random;  // random variable declaration
    private java.util.Random random2;    // rand variable declaration
    private java.util.Random random3;  // random variable declaration
    boolean running = true;
	
    
    @Override
	public void create () {
		
    	// ***************************************************************************************************************************************************************************************
        // Class                   :    create
        //
        // Class  parameters       :    None
        // 
        // Method return           :    void
        //
        // Synopsis                :    This class is responsible for parameter instantiation of player, screen, textures and rectangles
        //                              
        // Modifications           :    
        //                              Date           Developer              Notes
        //                             ------         -----------            -------
        //                            2022-11-17      LARRY KEMMO           Initial setup   
        //                              Date           Developer              Notes
        //                             ------         -----------            ------- 
        //                            2022-11-17      LARRY KEMMO           Addition of side comments
        //
        // *****************************************************************************************************************************************************************************************
    	
    	ReadFile();
    	batch = new SpriteBatch();
		background = new Texture("back.png");
		player = new Texture("Sasuke1.png");
		EndFont = new BitmapFont();
		EndFont.getData().setScale(5, 5);
		EndFont.setColor(Color.RED);
		WelcomeFont = new BitmapFont();
		WelcomeFont.getData().setScale(3, 3);
		WelcomeFont.setColor(Color.BLACK);
		ScoreFont = new BitmapFont();
//		ScoreFont.getData().setScale(3, 3);
		ScoreFont.setColor(Color.BLACK);
		PlayerRectangle = new Rectangle();
		PlayerRectangle.x = 550;
		PlayerRectangle.y = 0;
		PlayerRectangle.width = player.getWidth();
		PlayerRectangle.height = player.getHeight();
		rock = new Texture("asteroidR1.png");
		random = new java.util.Random();
		random2 = new java.util.Random();
		random3 = new java.util.Random();
		int counter;
		for(counter = 0; counter < 10; counter ++) {
			rockXPos = random.nextInt(0, 1100);
			rockYPos = random2.nextInt(900, 1000);
			rockSpeed = random3.nextInt(4, 9);
			Rock = new rocks(rockXPos, rockYPos, rockSpeed, rock);
			rockArray.add(Rock);
		}
		
	}

	@Override
	public void render () {
		
		// ***************************************************************************************************************************************************************************************
        // Class                   :    render
        //
        // Class  parameters       :    gameTime
        // 
        // Method return           :    void
        //
        // Synopsis                :    This class takes care of all entity movement, collision handling and timer increment
        //                              
        // Modifications           :    
        //                              Date           Developer              Notes
        //                             ------         -----------            -------
        //                            2022-11-17      LARRY KEMMO           Initial setup   
        //                              Date           Developer              Notes
        //                             ------         -----------            ------- 
        //                            2022-11-17      LARRY KEMMO           Addition of side comments
        //
        // *****************************************************************************************************************************************************************************************

		
		ScreenUtils.clear(1, 0, 0, 1);
		batch.begin();
		batch.draw(background, 0, 0);
		WelcomeFont.draw(batch, "Welcome To My Game ", WelcomeFontXPos, 790);
		ScoreFont.draw(batch, "Your Score is " + Math.floor(Timer), 20, 740);
		ScoreFont.draw(batch, "HighScore: " + HighScore, 20, 710);
//		System.out.println(Math.floor(Timer));
		batch.draw(player,PlayerRectangle.x, PlayerRectangle.y);
		int counter;
		for(counter = 0; counter < rockArray.size(); counter ++) {
			rockArray.get(counter).Draw(batch, rock);
		}
		if(fontCounter > 0) {
			EndFont.draw(batch, "GameOver !!! ", 400, 420);
		}
		
		if(running) {
			Time = Gdx.graphics.getDeltaTime();
			Timer = Timer + (1 * Time);
			WelcomeFontXPos += 2;
			for(counter = 0; counter < rockArray.size(); counter ++) {
				rockArray.get(counter).update();
				if(rockArray.get(counter).rockRectangle.overlaps(PlayerRectangle) && fontCounter < 1) {
					running = false;
					fontCounter ++;
					if(HighScore < Math.floor(Timer)) {
						HighScore = (int) Math.floor(Timer);
						WriteToFile();
					}
				}
			}
	
			if(Gdx.input.isKeyPressed(Keys.RIGHT) && PlayerRectangle.x < Gdx.graphics.getBackBufferWidth() - 46) {
				player = new Texture("SasukeR.png");
				PlayerRectangle.x += PlayerSpeed;
			}
			else if(Gdx.input.isKeyPressed(Keys.LEFT) && PlayerRectangle.x > 0) {
				player = new Texture("SasukeL.png");
				PlayerRectangle.x -= PlayerSpeed;
			}
		}
		batch.end();
	}
	
	@Override
	public void dispose () {
		batch.dispose();
		background.dispose();
		player.dispose();
		EndFont.dispose();
	}
	
	public void WriteToFile() {
		    try {
		      FileWriter myWriter = new FileWriter("file1.txt");
		      myWriter.write(HighScore.toString());
		      myWriter.close();
		      System.out.println("Successfully wrote to the file.");
		    } catch (IOException e) {
		      System.out.println("An error occurred.");
		      e.printStackTrace();
		    }
		  }
	
	public void ReadFile() {
		    try {
		      File myObj = new File("file1.txt");
		      Scanner myReader = new Scanner(myObj);
		      while (myReader.hasNextLine()) {
		        String data = myReader.nextLine();
		        HighScore = Integer.parseInt(data);
		      }
		      myReader.close();
		    } catch (FileNotFoundException e) {
		      System.out.println("An error occurred.");
		      e.printStackTrace();
		    }
		}
}
